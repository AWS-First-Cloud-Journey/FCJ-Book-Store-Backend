AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'fcj-book-store

  Sample SAM Template for fcj-book-store

  '
Globals:
  Function:
    Timeout: 3
Parameters:
  S3BookStoreWebName:
    Type: String
    Default: fcj-book-store-2023
  S3ImageStoreName:
    Type: String
    Default: book-image-store-2023
  S3ImageResizedName:
    Type: String
    Default: book-image-resize-store-2023
  AdminEmail:
    Type: String
    Default: admin@example.com
Resources:
  FcjBookStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: S3BookStoreWebName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'false'
        BlockPublicPolicy: 'false'
      WebsiteConfiguration:
        IndexDocument: index.html
  FcjBookStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: FcjBookStore
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: FcjBookStore
              - /*
  BookImageStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: S3ImageStoreName
  BookImageResizeStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: S3ImageResizedName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'false'
        BlockPublicPolicy: 'false'
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Books
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: rv_id
        AttributeType: N
      - AttributeName: name
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: rv_id
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: name-index
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  OrdersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Orders
      PrimaryKey:
        Name: id
        Type: String
  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: checkout-queue
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: order-notice
  MySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: AdminEmail
      Protocol: email
      TopicArn:
        Ref: SNSTopic
  FcjBookStoreUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cognito-fcj-book-store
      MfaConfiguration: 'OFF'
      AutoVerifiedAttributes:
      - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 30
      UsernameAttributes:
      - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
        - email
  FcjBookStoreUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: fcj-book-store
      UserPoolId:
        Ref: FcjBookStoreUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
  BooksList:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BooksList
      Handler: books_list.lambda_handler
      Runtime: python3.9
      FunctionName: books_list
      Architectures:
      - x86_64
      Policies:
      - Statement:
        - Sid: ReadDynamoDB
          Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          Resource:
          - Fn::GetAtt:
            - BooksTable
            - Arn
      Events:
        ListBook:
          Type: Api
          Properties:
            Path: /books/
            Method: get
            RestApiId:
              Ref: BookApi
    Metadata:
      SamResourceId: BooksList
  BookCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BookCreate
      Handler: book_create.lambda_handler
      Runtime: python3.9
      FunctionName: book_create
      Architectures:
      - x86_64
      Policies:
      - Statement:
        - Sid: AccessDynamoDB
          Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource:
          - Fn::GetAtt:
            - BooksTable
            - Arn
        - Sid: BookCreateItem
          Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: BookImageStore
              - /*
      Events:
        CreateBook:
          Type: Api
          Properties:
            Path: /books/
            Method: post
            RestApiId:
              Ref: BookApi
      Environment:
        Variables:
          BUCKET_SOURCE:
            Ref: BookImageStore
          BUCKET_DES:
            Ref: BookImageResizeStore
    Metadata:
      SamResourceId: BookCreate
  BookDelete:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BookDelete
      Handler: book_delete.lambda_handler
      Runtime: python3.9
      FunctionName: book_delete
      Architectures:
      - x86_64
      Policies:
      - Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:Query
          - s3:DeleteObject
          Resource:
          - Fn::GetAtt:
            - BooksTable
            - Arn
        - Sid: VisualEditor1
          Effect: Allow
          Action:
          - s3:DeleteObject
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: BookImageResizeStore
              - /*
      Events:
        DeleteBook:
          Type: Api
          Properties:
            Path: /books/{id}
            Method: delete
            RestApiId:
              Ref: BookApi
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: BookImageResizeStore
    Metadata:
      SamResourceId: BookDelete
  BookImageResizeStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: BookImageResizeStore
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: BookImageResizeStore
              - /*
  ImageResizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../fcj-book-store/resize_image/function.zip
      PackageType: Zip
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: resize_image
      Architectures:
      - x86_64
      Policies:
      - Statement:
        - Sid: ResizeUploadImage
          Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: BookImageResizeStore
              - /*
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3ImageStoreName
              - /*
      Events:
        ResizeImage:
          Type: S3
          Properties:
            Bucket:
              Ref: BookImageStore
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          WIDTH: 200
          HEIGHT: 280
          DES_BUCKET:
            Ref: BookImageResizeStore
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - ImageResizer
        - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Fn::Sub: ${AWS::AccountId}
      SourceArn:
        Fn::GetAtt:
        - BookImageStore
        - Arn
  Login:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: login
      CodeUri: Login
      Handler: login.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Environment:
        Variables:
          CLIENT_ID:
            Ref: FcjBookStoreUserPoolClient
      Events:
        Login:
          Type: Api
          Properties:
            Path: /login/
            Method: post
            RestApiId:
              Ref: BookApi
    Metadata:
      SamResourceId: Login
  Register:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: register
      CodeUri: Register
      Handler: register.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Environment:
        Variables:
          CLIENT_ID:
            Ref: FcjBookStoreUserPoolClient
      Events:
        Register:
          Type: Api
          Properties:
            Path: /register/
            Method: post
            RestApiId:
              Ref: BookApi
    Metadata:
      SamResourceId: Register
  ConfirmUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: confirm_user
      CodeUri: ConfirmUser
      Handler: confirm_user.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Environment:
        Variables:
          CLIENT_ID:
            Ref: FcjBookStoreUserPoolClient
      Events:
        ConfirmUser:
          Type: Api
          Properties:
            Path: /confirm_user/
            Method: post
            RestApiId:
              Ref: BookApi
    Metadata:
      SamResourceId: ConfirmUser
  CheckOutOrder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: checkout_order
      CodeUri: CheckOutOrder
      Handler: checkout_order.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Policies:
      - Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - sqs:*
          Resource:
          - Fn::GetAtt:
            - OrderQueue
            - Arn
        - Sid: VisualEditor1
          Effect: Allow
          Action:
          - sns:Publish
          Resource:
          - Fn::GetAtt:
            - SNSTopic
            - TopicArn
      Environment:
        Variables:
          QUEUE_NAME:
            Fn::GetAtt:
            - OrderQueue
            - QueueName
      Events:
        ConfirmUser:
          Type: Api
          Properties:
            Path: /books/order
            Method: post
            RestApiId:
              Ref: BookApi
    Metadata:
      SamResourceId: CheckOutOrder
  OrderManagement:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: order_management
      CodeUri: OrderManagement
      Handler: order_management.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Policies:
      - Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - sqs:*
          Resource:
          - Fn::GetAtt:
            - OrderQueue
            - Arn
        - Sid: VisualEditor1
          Effect: Allow
          Action:
          - dynamodb:Query
          Resource:
          - Fn::GetAtt:
            - OrdersTable
            - Arn
      Environment:
        Variables:
          QUEUE_NAME:
            Fn::GetAtt:
            - OrderQueue
            - QueueName
      Events:
        ConfirmUser:
          Type: Api
          Properties:
            Path: /books/order
            Method: get
            RestApiId:
              Ref: BookApi
    Metadata:
      SamResourceId: OrderManagement
  HandleOrder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: handle_order
      CodeUri: HandleOrder
      Handler: handle_order.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Policies:
      - Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
          - sqs:*
          Resource:
          - Fn::GetAtt:
            - OrdersTable
            - Arn
          - Fn::GetAtt:
            - OrderQueue
            - Arn
      Environment:
        Variables:
          QUEUE_NAME:
            Fn::GetAtt:
            - OrderQueue
            - QueueName
      Events:
        ProcessOrder:
          Type: Api
          Properties:
            Path: /books/order/handle
            Method: post
            RestApiId:
              Ref: BookApi
    Metadata:
      SamResourceId: HandleOrder
  DeleteOrder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: delete_order
      CodeUri: DeleteOrder
      Handler: delete_order.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Policies:
      - Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - sqs:*
          - dynamodb:DeleteItem
          Resource:
          - Fn::GetAtt:
            - OrderQueue
            - Arn
          - Fn::GetAtt:
            - OrdersTable
            - Arn
      Environment:
        Variables:
          QUEUE_NAME:
            Fn::GetAtt:
            - OrderQueue
            - QueueName
      Events:
        DeleteOrder:
          Type: Api
          Properties:
            Path: /books/order
            Method: delete
            RestApiId:
              Ref: BookApi
    Metadata:
      SamResourceId: DeleteOrder
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::Join:
            - ''
            - - Ref: FcjBookStore
              - .s3-website-
              - Ref: AWS::Region
              - .amazonaws.com
          Id:
            Fn::Join:
            - ''
            - - Ref: FcjBookStore
              - .s3-website-
              - Ref: AWS::Region
              - .amazonaws.com
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId:
            Fn::Join:
            - ''
            - - Ref: FcjBookStore
              - .s3-website-
              - Ref: AWS::Region
              - .amazonaws.com
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          ViewerProtocolPolicy: redirect-to-https
  BookApi:
    Type: AWS::Serverless::Api
    Name: fcj-serverless-api
    Properties:
      StageName: staging
      Cors:
        AllowMethods: '''GET,POST,OPTIONS,DELETE'''
        AllowHeaders: '''content-type'''
        AllowOrigin: '''*'''
      DefinitionBody:
        openapi: 3.0.1
        info:
          description: This is the APIs for book store web app
          version: 1.0.0
          title: API Gateway REST API to Lambda
        paths:
          /books:
            get:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BooksList.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            post:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookCreate.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /books/{id}:
            delete:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookDelete.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /login:
            post:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /register:
            post:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Register.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /confirm_user:
            post:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmUser.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /books/order:
            get:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrderManagement.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            post:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckOutOrder.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            delete:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteOrder.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /books/order/handle:
            post:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleOrder.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
      BinaryMediaTypes:
      - multipart~1form-data
Outputs:
  BookApi:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${BookApi}.execute-api.${AWS::Region}.amazonaws.com/staging/
